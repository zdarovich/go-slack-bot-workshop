Slack bot
Random user generator
Aleksander Belov


* Introduction

This code lab demonstrates slack bot programming with Go.

The final goal is to build a slack bot that generates random users in chat.


* Design overview

.image talk/img/diag-overview.png


* Pre-requisites

Install Golang 1.13
Macos
shell script:
    curl -o golang.pkg https://dl.google.com/go/go1.13.1.darwin-amd64.pkg
    sudo open golang.pkg
    export GOROOT=/usr/local/go
    export GOPATH=$HOME/Projects/Proj1
    export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
    go version

Ubuntu
shell script:
    wget https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz
    sudo tar -xvf go1.13.1.linux-amd64.tar.gz
    sudo mv go /usr/local
    export GOROOT=/usr/local/go
    export GOPATH=$HOME/Projects/Proj1
    export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
    go version

Windows

.link https://golang.org/dl/
download and install go1.13.1.windows-386.msi
    go version

* The exercises

This code lab is divided into 4 exercises. Each exercise builds on the previous one.

Final code is available in "go-slack-bot-workshop" repository


* Vital resources

Visit

.link https://github.com/zdarovich/go-slack-bot-workshop

for code samples

These slides are available at:

.link https://talks.godoc.org/github.com/zdarovich/go-slack-bot-workshop/talk.slide


* Part 1: reading and writing JSON

Write a program that

- reads struct
- encodes struct a JSON object, written to standard output (`os.Stdout`)

Should produce this output:

	{"name":"Nicolaie","surname":"Timofti","gender":"male","region":"Romania"}

* Encoding JSON objects

The `encoding/json` package converts JSON-encoded data to and from native Go data structures.

.play talk/code/json-encode.go /type/,$


* The Message type

Messages are sent as JSON objects like this:

	{"name":"Nicolaie","surname":"Timofti","gender":"male","region":"Romania"}

Which corresponds to a Go data structure like this:

	type Message struct {
    	Name    string `json:"name"`
    	Surname string `json:"surname"`
    	Gender  string `json:"gender"`
    	Region  string `json:"region"`
    }

* Decoding JSON

Decoding JSON from the stream of bytes is just like encoding, but in reverse.

.play talk/code/json-decode.go /type/,$

* Error checking

Many functions in Go return an `error` value.
These values are your friends; they will tell you where you went wrong.

Use [[http://golang.org/pkg/log/#Println][`log.Println`]] to print log messages, and [[http://golang.org/pkg/log/#Fatal][`log.Fatal`]] to print a message and exit the program printing a stack trace.

.play talk/code/log.go /func main/,$

* Part 2: Send messages using HTTP

Extend your program:

- make a TCP connection to the API
- read the JSON-decoded messages from the connection

* Making a network connection

The `net` package provides talk/code for network operations.

The [[http://golang.org/pkg/net/#Dial][`net.Dial`]] function opens a nework connection and returns a [[http://golang.org/pkg/net/#Conn][`net.Conn`]], which implements `io.Reader`, `io.Writer`, and `io.Closer` (or `io.ReadWriteCloser`).

.play talk/code/dial.go /func main/,$

(Usually you would use the `net/http` package to make an HTTP request; the purpose of this example is to demonstrate the lower-level `net` package.)

* Making a HTTP request
.play talk/code/http.go /func main/,$

* Part 3: Serving network connections

Write a new program:

- listen on a TCP port,
- start websocket connection

* Listen/Accept/Serve

The [[http://golang.org/pkg/net/#Listen][`net.Listen`]] function binds to a socket and returns a [[http://golang.org/pkg/net/#Listener][`net.Listener`]].
The [[http://golang.org/pkg/net/#Listener][`net.Listener`]] provides an `Accept` method that blocks until a client connects to the socket, and then returns a [[http://golang.org/pkg/net/#Conn][`net.Conn`]].

This server reads data from a connection and echoes it back:

.play talk/code/listen-single.go /func main/,$

* Start websocket connection

.play talk/code/wss.go /func main/,$

* Part 4: Running code in parallel

* Goroutines

Goroutines are lightweight threads that are managed by the Go runtime. To run a function in a new goroutine, just put `"go"` before the function call.

.play talk/code/goroutines.go


* Channels

Goroutines communicate via channels. A channel is a typed conduit that may be synchronous (unbuffered) or asynchronous (buffered).

.play talk/code/chan.go

* Sharing state

Mutexes are a simple means to protect shared state from concurrent access.

.play talk/code/lock.go /START/,/END/

* Lets build slack bot


